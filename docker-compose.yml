# docker-compose.yml

services:
  frontend:
    image: node:18-alpine
    container_name: workplace-optimizer-frontend-dev
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    ports:
      - '${FRONTEND_PORT:-3000}:3000'
    command: sh -c "npm install && npm run dev"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/api/health',
          '||',
          'exit',
          '1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    image: node:18-alpine
    container_name: workplace-optimizer-backend-dev
    working_dir: /app
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - backend_dist:/app/dist
    ports:
      - '${BACKEND_PORT:-8000}:8000'
    command: sh -c "npm install && npm run dev"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - TS_NODE_CACHE=false
      - TS_NODE_TRANSPILE_ONLY=true
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8000/health',
          '||',
          'exit',
          '1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: workplace-optimizer-redis-dev
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  backend_node_modules:
    driver: local
  backend_dist:
    driver: local
  redis_data:
    driver: local
